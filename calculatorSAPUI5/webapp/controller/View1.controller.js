sap.ui.define(["sap/ui/core/mvc/Controller"], function(Controller) {
	"use strict";
	var inputResult="0";//value in input
	var setZero=false;//a flag to reset
	var prevSymbol=0;
	var inputArray=[];
	
	return Controller.extend("BC.controller.View1", {
		/**
		 *@memberOf BC.controller.View1
		 */
		
		onClick: function(oEvent) {
			//This code was generated by the layout editor.
			var currentOperand = false;
			var button = oEvent.getSource();
    		var input = this.byId("__input0");
    	
    		if(inputResult.length>1) 
    			inputArray=inputResult.split('');
    		else
    			inputArray[0]=inputResult;
    		if (inputResult.length>15) 
    			{
    				inputResult="ERROR";
    				setZero=false;
    				input.setValue(inputResult);
    				inputResult="0";
    				return;
    			}
    		var prevSymbol=inputArray[inputArray.length-1];
    		var currentSymbol = button.getText();
    		
    		if (currentSymbol==="+"|| currentSymbol==="-"|| currentSymbol==="×"|| currentSymbol==="÷"){
    			setZero=false;
    			currentOperand=true;
    		}
    		
    		if(inputResult==="0"||setZero){
    			inputResult=button.getText();
    		}
    		else{
    			if((prevSymbol==="+"|| prevSymbol==="-"|| prevSymbol==="×"|| prevSymbol==="÷") && currentOperand===true){
    				inputResult=inputResult.substring(0, inputResult.length - 1)+ button.getText();
    			}
    			else
    				inputResult=inputResult + button.getText();
    		}
    		
    		switch(button.getText()){
    			case ("C"):
    				inputResult="0";
    				setZero=false;
    				break;
    			case("="):
					var numbers = inputResult.split(/\+|\-|\×|\÷|\=/g);
					var operators = inputResult.replace(/[0-9]|\./g, "").split("");
				
					var divide = operators.indexOf("÷");
					while (divide != -1) {
					   numbers.splice(divide, 2, numbers[divide] / numbers[divide + 1]);
					   operators.splice(divide, 1);
					   divide = operators.indexOf("÷");
					  }
					
					 var multiply = operators.indexOf("×");
					  while (multiply != -1) {
					    numbers.splice(multiply, 2, numbers[multiply] * numbers[multiply + 1]);
					    operators.splice(multiply, 1);
					    multiply = operators.indexOf("×");
					  }
					
					  var subtract = operators.indexOf("-");
					  while (subtract != -1) {
					    numbers.splice(subtract, 2, numbers[subtract] - numbers[subtract + 1]);
					    operators.splice(subtract, 1);
					    subtract = operators.indexOf("-");
					  }
					
					  var add = operators.indexOf("+");
					  while (add != -1) {
					    numbers.splice(add, 2, parseFloat(numbers[add]) + parseFloat(numbers[add + 1]));
					    operators.splice(add, 1);
					    add = operators.indexOf("+");
					  }
					
					  inputResult=numbers[0];
					  setZero=true;
					  break;
				case("+"):
				case("-"):
				case("×"):
				case("÷"):
					setZero=false;
					break;
    			default:
    				setZero=false;
    				break;
    		}
			input.setValue(inputResult);
		}
	});
});